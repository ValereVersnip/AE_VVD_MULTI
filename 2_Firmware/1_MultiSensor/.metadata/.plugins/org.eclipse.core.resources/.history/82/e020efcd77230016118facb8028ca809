 /*            #                                                   
             #@#@                                                   
          @@@#@@@                                                   
          @ `@@                                                     
          @@                                                        
          @@@                                                       
      .    @@                                                       
     @@@@. @@    @@          @@        @@,@;       @@  :@@@@@@@     
    @@@@@@@'@   @@@          #@`      '@  @@       @@  :@   .@@@.   
    @@@@@@@ @:  @@@           @@      @@  @@      `@:  :@`     @@   
    @@@@@@@@@@@@@@@           @@      @+  .@'     @@   :@`      @@  
    @@@@@@@@@@@@@@@           +@`    +@    @@     @@   :@`      @@  
    @@@@@@@@@@@@@@@            @@    @@    @@    `@.   :@`      @@  
    @@@@@@@@@@@@@@@            @@    @'     @#   @@    :@`      #@  
    @@@@@@@@@@@@@@@,           ;@.  +@      @@   @@    :@`      @@  
   @@@@@@@@@@@@@@@@@            @@  @@      #@  `@`    :@`      @@  
   @@@@@@@@@@@@@@@@@@           @@  @:       @# @@     :@`      @@  
  '@@@@@@@@@@@@@@@@@@           ,@,+@        @@ @@     :@`     ;@+  
  '@@@@+@@@@@@@@@@@@@            @@@@        +@`@      :@`    ,@@   
   @@@  @@@@@@ @@@@@#            @@@.         @@@      :@@@@@@@@    
        @@@@@@  :+:              `@@          @@+      `@@@@@@      
        @@@@@@                                                      
        @@@@@@                                                      
 */

/**
 * Valere Versnip Design 
 *
 * @project MultiSensor_bsp
 * @file humidity_dht22.c
 * @author TimB
 * @date 21-mei-2016
 * @brief	Brief.
 *
 * Description
 */

/* ***********************************************************************************************************************************************
 * Include Files
 * ***********************************************************************************************************************************************
 */
#include "humidity_dht22.h"
#include <string.h>

/*
 * ***********************************************************************************************************************************************
 * Defines
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Local Members
 * ***********************************************************************************************************************************************
 */



/*
 * ***********************************************************************************************************************************************
 * Private Function Prototypes
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Private Functions
 * ***********************************************************************************************************************************************
 */







status_t humidity_dht22_processdata(humidity_dht22_t *p_dht22)
{
	status_t status = status_ok;



	return status;
}



status_t humidity_dht22_statemachine(humidity_dht22_t *p_dht22)
{
	status_t status = status_ok;
	uint32_t currenttime;

	switch(p_dht22->state)
	{
	/* IDLE STATE */
	case humidity_dht22_state_idle:
		if(p_dht22->start)
		{
			/* immdiately turn off start, and set the running flag */
			p_dht22->start = false;
			p_dht22->running = true;
			/* reset parameters */
			p_dht22->ready = false;
			p_dht22->valid = false;
			memset(p_dht22->samplebuffer, 0, sizeof(p_dht22->samplebuffer));
			p_dht22->rawdata 		= 0;
			p_dht22->crc 			= 0;
			p_dht22->humidity 		= 0;
			p_dht22->temperature 	= 0;
			p_dht22->samplecount 	= 0;

			/* put the dataline as output, and put low */
			status = GPIO_Set_PinDir(p_dht22->gpioport, p_dht22->gpiopin, outputlow);
			if(status == status_ok)
			{
				/* take timestamp */
				SYSTICK_GetTicks(&p_dht22->timestamp);
				/* next state is start */
				p_dht22->state = humidity_dht22_state_start;
			}
		}
		break;

	/* START STATE */
	case humidity_dht22_state_start:
		/* get currenttime */
		SYSTICK_GetTicks(&currenttime);
		/* if the time for start pulse has finished */
		if(currenttime - p_dht22->timestamp > HUMIDITY_DHT22_TIME_STARTPULSE)
		{
			/* set the data pin as input */
			status = GPIO_Set_PinDir(p_dht22->gpioport, p_dht22->gpiopin, input);
			if(status == status_ok)
			{
				/* next state get samples */
				p_dht22->state = humidity_dht22_state_samples;
				/* enable the 5us mrt and its interrupts */
				status = MRT_EnableTimer(p_dht22->mrt, true);
			}
		}
		break;


	/* SAMPLE STATE */
	case humidity_dht22_state_samples:
		/* wait until 42 samples have been read */
		if(p_dht22->samplecount >= HUMIDITY_DHT22_SAMPLEBUFFERSIZE)
		{
			/* immediately stop 10us mrt */
			status = MRT_EnableTimer(p_dht22->mrt, false);
			if(status == status_ok)
			{
				/* go process the received data */
				p_dht22->state = humidity_dht22_state_processdata;
			}
		}
		break;



	/* PROCESS DATA STATE */
	case humidity_dht22_state_processdata:

		break;

	}


	return status;
}


/*
 * ***********************************************************************************************************************************************
 * Public Functions
 * ***********************************************************************************************************************************************
 */


/**
 * Initialize the humidity dht22 sensor.
 *
 * This function will also setup the edge pin interrupt for the DHT22 data pin.
 * @param p_dht22 dht22 device
 * @param p_config configuration data
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t HUMIDITY_DHT22_Init(humidity_dht22_t *p_dht22, humidity_dht22_config_t *p_config)
{
	status_t status = status_ok;

	/* populate struct */
	p_dht22->id 			= p_config->id;
	p_dht22->gpioport 		= p_config->gpioport;
	p_dht22->gpiopin 		= p_config->gpiopin;
	p_dht22->mrt 			= p_config->mrt;
	/* set to default */
	p_dht22->start			= false;
	p_dht22->running 		= false;
	p_dht22->ready 			= false;
	p_dht22->valid 			= false;
	memset(p_dht22->samplebuffer, 0, sizeof(p_dht22->samplebuffer));
	p_dht22->rawdata 		= 0;
	p_dht22->crc 			= 0;
	p_dht22->humidity 		= 0;
	p_dht22->temperature 	= 0;
	p_dht22->samplecount 	= 0;
	p_dht22->state 			= humidity_dht22_state_idle;

	SYSTICK_GetTicks(&p_dht22->timestamp);
	p_dht22->timeout_stamp 		= p_dht22->timestamp;


	NVIC_ClearPendingIRQ(PININT0_IRQn);
	NVIC_DisableIRQ(PININT0_IRQn);

	return status;
}


/**
 * Run0 function for humidity dht22 sensor.
 *
 * @note This function should be called periodically from higher level routines.
 * @param p_dht22 dht22 device
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t HUMIDITY_DHT22_Run0(humidity_dht22_t *p_dht22)
{
	status_t status = status_ok;
	status = humidity_dht22_statemachine(p_dht22);
	return status;
}


/**
 * Start a conversion.
 *
 * This function will check if a conversion is already running, and will raise an error.
 * @param p_dht22 dht22 device
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t HUMIDITY_DHT22_Start(humidity_dht22_t *p_dht22)
{
	status_t status = status_ok;
	uint32_t currentTime;
	/* check if a converision is not already started */
	if(p_dht22->running)
	{
		status = humidity_dht22_running;
	}
	/* check if the timeout has passed */
	SYSTICK_GetTicks(&currentTime);
	if(currentTime - p_dht22->timeout_stamp < HUMIDITY_DHT22_TIME_OUT)
	{
		status = humidity_dht22_toofast;
	}
	if(status == status_ok)
	{
		p_dht22->start = true;
	}
	return status;
}


/**
 * Falling edge data routine for reading in data into samplebuffer.
 *
 * This function should be called from falling edge pin interrupt routine.
 * @param p_dht22 dht22 device
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t HUMIDITY_DHT22_FallingEdgeRoutine(humidity_dht22_t *p_dht22)
{
	status_t status = status_ok;
	/* get 10us timestamp  */
	MRT_GetTicks(p_dht22->mrt, &p_dht22->samplebuffer[p_dht22->samplecount]);
	/* increment the samplecount */
	p_dht22->samplecount++;
	return status;
}

/* End of file humidity_dht22.c */
