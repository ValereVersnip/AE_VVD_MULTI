 /*            #                                                   
             #@#@                                                   
          @@@#@@@                                                   
          @ `@@                                                     
          @@                                                        
          @@@                                                       
      .    @@                                                       
     @@@@. @@    @@          @@        @@,@;       @@  :@@@@@@@     
    @@@@@@@'@   @@@          #@`      '@  @@       @@  :@   .@@@.   
    @@@@@@@ @:  @@@           @@      @@  @@      `@:  :@`     @@   
    @@@@@@@@@@@@@@@           @@      @+  .@'     @@   :@`      @@  
    @@@@@@@@@@@@@@@           +@`    +@    @@     @@   :@`      @@  
    @@@@@@@@@@@@@@@            @@    @@    @@    `@.   :@`      @@  
    @@@@@@@@@@@@@@@            @@    @'     @#   @@    :@`      #@  
    @@@@@@@@@@@@@@@,           ;@.  +@      @@   @@    :@`      @@  
   @@@@@@@@@@@@@@@@@            @@  @@      #@  `@`    :@`      @@  
   @@@@@@@@@@@@@@@@@@           @@  @:       @# @@     :@`      @@  
  '@@@@@@@@@@@@@@@@@@           ,@,+@        @@ @@     :@`     ;@+  
  '@@@@+@@@@@@@@@@@@@            @@@@        +@`@      :@`    ,@@   
   @@@  @@@@@@ @@@@@#            @@@.         @@@      :@@@@@@@@    
        @@@@@@  :+:              `@@          @@+      `@@@@@@      
        @@@@@@                                                      
        @@@@@@                                                      
 */

/**
 * Valere Versnip Design 
 *
 * @project MultiSensor_bsp
 * @file gpio.c
 * @author TimB
 * @date 16-mei-2016
 * @brief	Low level routines for gpio access.
 *
 * Gpio initialization and low level routines.
 */

/* ***********************************************************************************************************************************************
 * Include Files
 * ***********************************************************************************************************************************************
 */
#include "gpio.h"
#include "lowleveldriversconfig.h"

/*
 * ***********************************************************************************************************************************************
 * Defines
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Local Members
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Private Function Prototypes
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Private Functions
 * ***********************************************************************************************************************************************
 */






/*
 * ***********************************************************************************************************************************************
 * Public Functions
 * ***********************************************************************************************************************************************
 */

/**
 * Initialize all Gpio pins.
 *
 * If a pin is not in this define, it will be configured as input.
 * @param gpioParams array with gpio params
 * @param gpioParamsLen length of the gpioparams array
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t GPIO_Init(const gpio_pin_t gpioParams[], uint8_t gpioParamsLen)
{
	uint8_t i;

	/* Initialize GPIO */
	Chip_GPIO_Init(LPC_GPIO_PORT);

	/* set direction, and level if output for al gpio pins */
	for(i = 0; i < gpioParamsLen; i++)
	{
		if(gpioParams[i].dir == input)
		{
			Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, gpioParams[i].port, gpioParams[i].pin);
		}
		else
		{
			Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioParams[i].port, gpioParams[i].pin);
			if(gpioParams[i].dir == outputhigh) /* set the startup output state */
			{
				Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioParams[i].port, gpioParams[i].pin, true);
			}
			else
			{
				Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioParams[i].port, gpioParams[i].pin, false);
			}
		}
	}
	return status_ok;
}


/**
 * DeInitialize the GPIO.
 *
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t GPIO_DeInit()
{
	/* DeInitializes GPIO */
	Chip_GPIO_DeInit(LPC_GPIO_PORT);
	return status_ok;
}



/**
 * Toggle GPIO pin.
 *
 * @param port GPIO port
 * @param pin GPIO pin
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t GPIO_Toggle_Pin(uint8_t port, uint8_t pin)
{
	Chip_GPIO_SetPinToggle(LPC_GPIO_PORT, port, pin);
	return status_ok;
}


/**
 * Set GPIO pin.
 *
 * @param port GPIO port
 * @param pin GPIO pin
 * @param set true: high, false: low
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t GPIO_Set_Pin(uint8_t port, uint8_t pin, bool set)
{
	Chip_GPIO_SetPinState(LPC_GPIO_PORT, port, pin, set);
	return status_ok;
}

/**
 * Get GPIO Pin.
 *
 * @param port GPIO port
 * @param pin GPIO pin
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t GPIO_Get_Pin(uint8_t port, uint8_t pin, bool *p_result)
{
	*p_result = Chip_GPIO_GetPinState(LPC_GPIO_PORT, port, pin);
	return status_ok;
}

/**
 * Set GPIO Pin Direction.
 *
 * If output: this function will also set the appropriate level.
 * @param port GPIO port
 * @param pin GPIO pin
 * @param dir true: output,
 * @return	status_ok if succeeded (otherwise check status.h for details).
 */
status_t GPIO_Set_PinDir(uint8_t port, uint8_t pin, gpio_direction_t dir)
{
	if(dir == input)
	{
		Chip_GPIO_SetPinDIR(LPC_GPIO_PORT, port, pin, false);	/* false for input */
	}
	else
	{
		Chip_GPIO_SetPinDIR(LPC_GPIO_PORT, port, pin, true);	/* true for output */
		if(dir == outputhigh)
		{
			Chip_GPIO_SetPinState(LPC_GPIO_PORT, port, pin, true);
		}
		else
		{
			Chip_GPIO_SetPinState(LPC_GPIO_PORT, port, pin, false);
		}
	}
	return status_ok;
}


/* End of file gpio.c */
