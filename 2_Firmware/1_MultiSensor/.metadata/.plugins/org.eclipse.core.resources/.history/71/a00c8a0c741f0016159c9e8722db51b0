 /*            #                                                   
             #@#@                                                   
          @@@#@@@                                                   
          @ `@@                                                     
          @@                                                        
          @@@                                                       
      .    @@                                                       
     @@@@. @@    @@          @@        @@,@;       @@  :@@@@@@@     
    @@@@@@@'@   @@@          #@`      '@  @@       @@  :@   .@@@.   
    @@@@@@@ @:  @@@           @@      @@  @@      `@:  :@`     @@   
    @@@@@@@@@@@@@@@           @@      @+  .@'     @@   :@`      @@  
    @@@@@@@@@@@@@@@           +@`    +@    @@     @@   :@`      @@  
    @@@@@@@@@@@@@@@            @@    @@    @@    `@.   :@`      @@  
    @@@@@@@@@@@@@@@            @@    @'     @#   @@    :@`      #@  
    @@@@@@@@@@@@@@@,           ;@.  +@      @@   @@    :@`      @@  
   @@@@@@@@@@@@@@@@@            @@  @@      #@  `@`    :@`      @@  
   @@@@@@@@@@@@@@@@@@           @@  @:       @# @@     :@`      @@  
  '@@@@@@@@@@@@@@@@@@           ,@,+@        @@ @@     :@`     ;@+  
  '@@@@+@@@@@@@@@@@@@            @@@@        +@`@      :@`    ,@@   
   @@@  @@@@@@ @@@@@#            @@@.         @@@      :@@@@@@@@    
        @@@@@@  :+:              `@@          @@+      `@@@@@@      
        @@@@@@                                                      
        @@@@@@                                                      
 */

/**
 * Valere Versnip Design 
 *
 * @project MultiSensor_bsp
 * @file rgbled.c
 * @author TimB
 * @date 21-mei-2016
 * @brief	Brief.
 *
 * Description
 */

/* ***********************************************************************************************************************************************
 * Include Files
 * ***********************************************************************************************************************************************
 */
#include "rgbled.h"

/*
 * ***********************************************************************************************************************************************
 * Defines
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Local Members
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Private Function Prototypes
 * ***********************************************************************************************************************************************
 */


/*
 * ***********************************************************************************************************************************************
 * Private Functions
 * ***********************************************************************************************************************************************
 */




/*
 * ***********************************************************************************************************************************************
 * Public Functions
 * ***********************************************************************************************************************************************
 */

status_t RGBLED_Init(rgbled_t *p_regbled, rgbled_config_t *p_config)
{
	status_t status = status_ok;


	return status;
}


status_t RGBLED_SetColor(rgbled_t *p_rgbled, uint32_t color)
{
	status_t status = status_ok;
	uint8_t r,g,b;

	p_rgbled->color = color;
	r = (uint8_t)((color >> 16) | 0x00FF);
	g = (uint8_t)((color >> 8) | 0x00FF);
	b = (uint8_t)((color >> 0) | 0x00FF);

	PWM_setdutycycle(p_rgbled->p_pwm, p_rgbled->red_channel, r);
	PWM_setdutycycle(p_rgbled->p_pwm, p_rgbled->green_channel, g);
	PWM_setdutycycle(p_rgbled->p_pwm, p_rgbled->blue_channel, b);
	return status;
}


status_t RGBLED_SetLedoutMode(rgbled_t *p_rgbled, rgbled_ledout_t ledout)
{
	status_t status = status_ok;
	p_regbled->ledout = ledout;

	if(ledout == rgbled_off)
	{

	}

	return status;
}

/* End of file rgbled.c */
